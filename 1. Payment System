
Introduction
Payment System for Ecommerce Website

For introduction:

Anology to a kid. Suppose you want to buy a toy from a shop. how you are buying. You are paying using Money. You can use cash, cards, checks etc. 
Payment System Handles the smooth transfer of money in between one system to other.
Examples:
--> In Amazon, ordering a Toy. First you enter your card details, Payment system deduct the price from your
card and process it and ship the order to the address you mentioned.
Here money tranfered from your account  --> Amazon account
Amazon is not the real  supplier of the product.
Amazon takes the commision and transportation cost and send the rest amount to the suppliers

Cash flow from Customer --> AMAZON --> Supplier

We are going to design the entire system.

It should be reliable, scalable and Flexible Payments

Question ask to Interviewer:
Questions to Ask:

1. What kind of Payment system that we are building ?
Ans: Are we buidling the backend side of a payment system of Ecommerce Website. When the customer place the order, we have to handle everything till the customer recive the product.

2. What all payment options supports?
Credit cards, Bank Transfer, Debit Cards

3. Do we need to handle the Payment procssing by ourselfs or using 3rd party services like Stripe, Square etc.
4. So we dont need to store the credit card informations for security and complaince requirements. 

5. Does this application go Global ? Need to accept other curriencies and international payments? Yes

6. How many transactions per Day ? 1 million or 10 Lakh

7. So we need to support cash-in-flow and cash-out-flow
cash-in-flow = customer --> Ecommerce Account 
cash-out-flow = Ecommerce Account --> Supplier

Functional & Non-Functional Requirements ::
Functional Requirements:

Cash-in-flow == Payment system recieves money from customers on behalf of sellers
Pay-out-flow == Sellers recieved the money once the shipping is completed to the customer after deducting the commision & logistics fees from Ecommerce site

Non-Functional Requirements:

Since it is a financial usecases, should focus on reliablity and Fault Tolerance. Payments should be carefully handled.

Reconcilaiation process at the end of the day to validate the transactions and making sure that system is consistent.

Estimate Calculation:
Transaction per Seconds : 1 million/10^5  = 1000000/100000 = 10/seconds
It means we need a database that store the payment transcation correctly at high throughput

High Level Design:
We need to care about 2 steps

Cash-in-flow == When the customer place an order, money transfer from customer account to Amazon bank account. Amazon takes a commision and transportation fees

Cash-out-flow == Once the product shipped and recieved by the customer, money transfered from Amazon Bank account to Supplier account

DRAW THE DIAGRAM with Components:

Components:

Payment Event
Payment Service with DB
Payment Executor with DB
Ledger with DB
Wallet with DB
Payment Service Provider PSP 

STEPS:
1. When user clicks place order button, payment event is generated and send to payment service.
2. Payment service stores the event in database
3. In a single order, multiple products in a single order by differnt sellers. Split the payment based on orders or Sellers and passed to Payment Executors
4. Payment Executor stores the payment orders in the database.
5. Payment Executor calls the external PSP to process the credit/Debit card Payment
6. External PSP validate the credentials and process the payment.
7. PSP sends confirmation to Payment service if accept or failed confirmation 
8. Added the records in Ledger and Wallet . Ledger - credited/Debited amount from the accounts. Wallet track the balance amount of each merchant. 

APIs for Payment Service:
POST /v1/payments

This endpoints will execute a payment event. 

GET /v1/payments{:id}

This endpoint give the status of a single payment orders


Table Modelling::
Two Tables:

Payment Event :
CheckOutID : (Global Unique ID for the checkOut) -> Primary Key
BuyerInfo: String
SellerInfo: String 
CreditCard/Debit_CardInfo :  
Payment_done : Boolean

Payment Order:
payementOrderID: Global unique ID --> Primary Key
BuyerAccount: 
CheckOutID: Foriegn Key
Currency:
amount:
PaymentOrderStatus: string
Ledger_Updated: Boolean
Wallet_updated: Boolean

Since it a Financial Usecase, Need to be ACID complaint , relational Database is suitable for it.

Detailed Design:
PSP Integration
Reconciliation
Handling Payment processing Delays
Communication among Internal Services
Handling Failed Payments
Exact one delivery
Consitency & Idempotency
Security



PSP Integration:

There are two ways we can do:
1. Directly connect with BANK or Card Schemas like VISA/MasterCard 
2. With thirdparty integration

It is important to store the sensitive information (credit card/ User details). Complex to integrate with multiple banks and different types of cards(VISA, MASTERCARD, DISCOVER, RUPPAY, INTERNATIONAL, LOCALs).

If the company choose external PSP, PSP provides a hosted Payment Page to collect the card informations and securely store them in PSP. Most of the companies do these integration.

Hosted Page provides = Checkout Page --> Payment Page --> Payment complete Page

1. Suppose user added all the products he/she want to purchase in the cart.
2. User clicks the checkout button in the website and client calls payment service in the backend with the payment order informations with a unique PaymentID(UUID)
3. Payment service sends a registration request to PSP. It includes the amount, currency, date, and redirect url,orderID details. 
4. PSP creates a tokenkey for that PaymentID and return back to payment service and store it in DB for that particular PaymentID.
5. Once the tocken is persisted, Client get displayed a Payment hosted page where user can enter credit card and other user infomation which is stored and procesing only on PSP database.
6. PSP return the payment status.
7. Webpage is redirected to the status page where the user can see the status.
8. once the payment is complete the user will recieve an email that it is succesfully completed and share ETA for the delivery.


Reconciliation:
Since the payment services have many components that interact each other via asynchronously, there is no guarantee that we will get the response. Inorder to tally or verify the settlement between the processs, PSP shared a daily file at night to Payment service. A reconcilaiation process is setup which will parse the file and and verify each transactions and amount deducted from the customer and how much it transfered.  If there is any mismatch an email is shared to the admin, or if it  a refresh in the Ledger database, it will refresh and get the updated status.


Handling Payment Processing Delays:
There are cases where payment transaction will takes more hours for verification. So the user will get a page where he/she can view the status -pending and write if any pending action needed from user required- either verify opt code or zip number etc. 

Asynchronous Communications: In the paymenet system, Each events should share it to different groups. For Exp: Analytics team, Marketing, Billing team. It is recommend to add a asynchrouous system in betweem to share the update example KAFKA.

Handling Failed Transactions:
Each Payment system should handle failed transactions. Reliablity and fault tolerence are the key points here.
Tracking the each payment status. If it is failed system should have ability to retry it or refund it.
Need a process to orchestrate the failed transcations, if the limit cross certain time, put it in DLQ(dEAD lETTER Que) for further analysis by the admins.

Exactly one Delivery:
One of the important problems is Double charges:
2 cases: USER clicks multiple times checkout, Delay of the payment response from PSP due to Network errors
To solve it, when creating a token, for unique token UUID(idempotency) for each paymentID which is persisted in a DB. it get stored in both PSP and Payment service side. If the user clicks muliple times, only one execution is processs. 

Follow Ledger System Service for consistency. Wallet keeps all the balance for each merchants. 
In a distributed Environment, Network issue happens. Data stores in multiple Data centers. Follow master -slave architecture. Read from one central database, update to the replica's. Add Load Balancer to evenly
distibute the requests.

Security: 
Request- Response --> HPPS.
Put Rate Limiter to limit the transactions per seconds at peak time.
Firewall for DoS attack.
Data replications accross multiple centers.
Encription of data and Monitoring of the system.
Performance Monitoring.

